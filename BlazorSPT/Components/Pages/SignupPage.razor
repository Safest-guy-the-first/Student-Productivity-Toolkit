@using SPT_API.Data
@using SPT_API.Models
@inject BlazorSPT.Services.AuthService AuthService
@inject NavigationManager Navigation
@page "/signup"


<PageTitle>SignUpPage</PageTitle>
<div class="login-container">
    <div class="login-box">
        <h2>Sign Up</h2>
        <EditForm Model="@student" OnValidSubmit="@CreateStudent" FormName="SignUpForm">
            <DataAnnotationsValidator />
            <p>All fields are case sensitive</p>
            <div class="form-group">
                <InputText @bind-Value="student.firstName"
                class="form-control"
                placeholder="First Name" />
                <ValidationMessage For="@(() => student.firstName)" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="student.lastName"
                class="form-control"
                placeholder="Last Name" />
                <ValidationMessage For="@(() => student.lastName)" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="student.department"
                class="form-control"
                placeholder="Department" />
                <ValidationMessage For="@(() => student.department)" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="student.School"
                           class="form-control"
                           placeholder="School" />
                <ValidationMessage For="@(() => student.School)" class="text-danger" />
            </div>
            <div class="form-group">
                <InputSelect @bind-Value="student.level" class="form-control" style="width:320px;">
                    <option value="">-- Select Level --</option>
                    <option value="100 Level">100 Level</option>
                    <option value="200 Level">200 Level</option>
                    <option value="300 Level">300 Level</option>
                    <option value="400 Level">400 Level</option>
                    <option value="500 Level">500 Level</option>
                    <option value="Rather not say">Rather not say</option>
                </InputSelect>
                <ValidationMessage For="@(() => student.level)" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="student.studentUserName"
                class="form-control"
                placeholder="Username" />
                <ValidationMessage For="@(() => student.studentUserName )" class="text-danger" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="student.email"
                class="form-control"
                placeholder="Email" />
                <ValidationMessage For="@(() => student.email )" class="text-danger" />
            </div>
            <div class="form-group password-field">
                <input key="type" @bind="student.studentPassword"
                type="@(ShowPassword? "text":"password")"
                class="form-control password-input"
                placeholder="Password" />
                <button type="button" class="btn-toggle" @onclick="TogglePass">
                    @(ShowPassword ? "hide" : "show")
                </button>
            </div>
            <ValidationMessage For="@(() => student.studentPassword )" class="text-danger" />

            <button type="submit" class="btn-signin">Sign Up</button>
        </EditForm>
        @if (isLoading)
        {
            <div class="loading-overlay">
                <p>Loading... please wait</p>
            </div>
        }
        else if (isSuccess)
        {
            <div class="success-overlay">
                <p>✅ Creation successful!</p>
            </div>
        }
        <div class="signup-link">
            <span>Already have an account?</span>
            <a href="/login">Login</a>
        </div>

    </div>
</div>

@code {
    private StudentModel student = new();
    private bool ShowPassword = false;
    private bool isLoading = false;
    private bool isSuccess = false;

   




    public void TogglePass()
    {
        ShowPassword = !ShowPassword;
    }

    private async Task CreateStudent()
    {
        isLoading = true;
        isSuccess = false;
        var result = await AuthService.SignUp(student);
        
        if (string.IsNullOrWhiteSpace(result.uniqueUserId) == false || string.IsNullOrEmpty(result.uniqueUserId) == false)
        {
            isSuccess = true;
            isLoading = false;

            StateHasChanged();

           
            await Task.Delay(TimeSpan.FromSeconds(1));

            Navigation.NavigateTo("/login");

        }
    }
}
