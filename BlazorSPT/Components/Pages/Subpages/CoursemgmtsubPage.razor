@using SPT_API.Models
@using BlazorSPT.Services;
@using SPT_API.Data.DTOs;
@using BlazorSPT.Components.Pages.ReusableComponents;

@inject BlazorSPT.Services.CourseService courseService



<div class="course-wrapper">
    <div class="course-header">
        <div class="controls">
            <input type="text"
            class="form-control search-input"
            placeholder="Search courses..."
            @bind="searchTerm"
            @oninput="FilterCourses" />

            <button class="btn btn-primary ms-3" onclick=@(()=> {showAddForm = true;})>Add Course</button>
        </div>
    </div>



    @if (showAddForm == true)
    {
        <AddCourseSubPage addedCourse="addedCourse" User="User" OnCourseAdded="AddCourse" OnCancel="HandleCancelForAddform"/>
    } 
     @if(showDelpopup == true)
    {
        <ConfirmationModal OnConfirm="ExecuteDelete" OnCancel="ExecuteCancelForDelete">
            <Message>
                <p>Delete <strong>@delCourseCode</strong>?</p>
                <p class="text-danger">This will remove it permanently</p>
            </Message>
        </ConfirmationModal>
    }


    <div class="table-scroll">
        @if (courses == null)
        {
            <p><em>Loading...</em></p>
        }
        @if(courses != null)
        {
            if (courses.Count == 0)
            {
                <p><em>No Courses Found</em></p>
            }
            else
            {

                <table class="table table-striped course-table">
                    <thead>
                        <tr>
                            <th> S/N</th>
                            <th>Course Code</th>
                            <th>Course Title</th>
                            <th>Course Unit</th>
                            <th>Grade</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int sn = 1;
                        }
                        @foreach (var course in courses.OrderBy(c => c.CourseCode))
                        {
                            <tr>
                                <td>@sn</td>
                                <td>@course.CourseCode</td>
                                <td>@course.CourseTitle</td>
                                <td>@course.CourseUnit</td>
                                <td>@course.Grade</td>
                                <td>
                                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCourse(course,sn)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteCourse(course.CourseCode)">Delete</button>
                                </td>
                            </tr>
                            sn++;
                        }
                    </tbody>
                </table>
            }
        }

    </div>
</div>



@code {
    private List<CourseModel>? courses;

    private CourseModel addedCourse = new();


    [Inject] private AuthService AuthService { get; set; } = default;


    private bool showAddForm = false;

    private bool showDelpopup = false;

    string delCourseCode = "";


    private string searchTerm = "";

    private StudentModel? User;









    private void EditCourse(object m, int count)
    {

    }

    private void DeleteCourse(string courseCodeToDel)
    {
        delCourseCode = courseCodeToDel;
        showDelpopup = true;
    }
    private async Task ExecuteDelete()
    {
        await courseService.DeleteCourse(delCourseCode);
        await ReloadCourses();
        showDelpopup = false;
        StateHasChanged();
    }
    private void ExecuteCancelForDelete() => showDelpopup = false;



   
    
    private async Task AddCourse()
    {
        await courseService.AddCourse(addedCourse);
        courses = await courseService.GetCourses();
        showAddForm = false;


        addedCourse = new();
        StateHasChanged();
    }

    public void HandleCancelForAddform()
    {
        showAddForm = false;
        addedCourse = new();
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = AuthService.CurrentUser;
            courseService.currentUser = User;
            courses = await courseService.GetCourses();
        } catch(Exception e)
        {
            Console.WriteLine($"Error fetching courses: {e.Message}");
            courses = new List<CourseModel>();
        }

    }


    protected async Task ReloadCourses()
    {
        courses = await courseService.GetCourses();
        StateHasChanged();
    }


    private async Task FilterCourses(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        courses = await courseService.SearchCourses(searchTerm);
    }



}
